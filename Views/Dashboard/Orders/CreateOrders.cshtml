@model OnlineStoreMVC.Models.ViewModels.OrderFormViewModel
@{
  Layout = "~/Views/Shared/_DashboardLayout.cshtml";
  ViewData["Title"] = "T·∫°o ƒë∆°n h√†ng";
}

<div class="d-flex justify-content-center mt-5">
  <div class="card shadow" style="width: 1000px;">
    <div class="card-header bg-success text-white">
      <h4 class="mb-0">üì¶ T·∫°o ƒë∆°n h√†ng</h4>
    </div>
    <div class="card-body">
      @Html.ValidationSummary(true, "", new { @class = "error-message" })

      <form asp-action="Create" method="post">
        <div class="mb-3">
          <label asp-for="UserID" class="form-label">Ng∆∞·ªùi ƒë·∫∑t h√†ng</label>
          <select asp-for="UserID" class="form-select" asp-items="ViewBag.Users" required>
            <option value="">-- Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng --</option>
          </select>
          <span asp-validation-for="UserID" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label asp-for="Status" class="form-label">Tr·∫°ng th√°i ƒë∆°n h√†ng</label>
          <select asp-for="Status" class="form-select" required>
            <option value="Pending">Pending</option>
            <option value="Confirmed">Confirmed</option>
            <option value="Shipping">Shipping</option>
            <option value="Completed">Completed</option>
          </select>
          <span asp-validation-for="Status" class="text-danger"></span>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
          <h5>üõí S·∫£n ph·∫©m</h5>
          <button type="button" class="btn btn-outline-secondary" onclick="addProductRow()">‚ûï Th√™m s·∫£n ph·∫©m</button>
        </div>
        <div id="product-list">
          <div class="row mb-2 product-row">
            <div class="col-md-6">
              <select name="Items[0].ProductID" class="form-select" required>
                <option value="">-- Vui l√≤ng ch·ªçn s·∫£n ph·∫©m --</option>
                @foreach (SelectListItem item in ViewBag.Products)
                {
                  <option value="@item.Value">@item.Text</option>
                }
              </select>
            </div>
            <div class="col-md-4">
              <input type="number" name="Items[0].Quantity" class="form-control" placeholder="S·ªë l∆∞·ª£ng" min="1"
                required />
            </div>
            <div class="col-md-2 d-flex align-items-center">
              <button type="button" class="btn btn-danger" onclick="removeRow(this)">‚ûñ</button>
            </div>
          </div>
        </div>

        <button type="submit" class="btn btn-success">T·∫°o m·ªõi</button>
        <a href="/Dashboard/Orders" class="btn btn-secondary ms-2">Quay l·∫°i</a>
      </form>
    </div>
  </div>
</div>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />
  <script>
    let productIndex = 1;

    function addProductRow() {
      const container = document.getElementById("product-list");
      const index = document.querySelectorAll(".product-row").length;

      const row = document.createElement("div");
      row.className = "row mb-2 product-row";

      const productOptions = document.querySelector('select[name="Items[0].ProductID"]').innerHTML;

      row.innerHTML = `
      <div class="col-md-6">
        <select name="Items[${index}].ProductID" class="form-select product-select" required>
          ${productOptions}
        </select>
      </div>
      <div class="col-md-4">
        <input type="number" name="Items[${index}].Quantity" class="form-control quantity-input" placeholder="S·ªë l∆∞·ª£ng" min="1" required />
      </div>
      <div class="col-md-2 d-flex align-items-center">
        <button type="button" class="btn btn-danger" onclick="removeRow(this)">‚ûñ</button>
      </div>
    `;

      container.appendChild(row);
    }

    function removeRow(button) {
      const row = button.closest(".product-row");
      if (document.querySelectorAll(".product-row").length > 1) {
        row.remove();
        reindexProductRows();
      } else {
        alert("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m trong ƒë∆°n h√†ng.");
      }
    }

    function reindexProductRows() {
      const rows = document.querySelectorAll(".product-row");
      rows.forEach((row, index) => {
        const select = row.querySelector(".product-select");
        const input = row.querySelector(".quantity-input");

        select.name = `Items[${index}].ProductID`;
        input.name = `Items[${index}].Quantity`;
      });

      productIndex = rows.length;
    }
  </script>
}
