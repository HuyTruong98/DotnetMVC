@model OnlineStoreMVC.Models.ViewModels.OrderFormViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
  Layout = "~/Views/Shared/_DashboardLayout.cshtml";
  ViewData["Title"] = "Ch·ªânh s·ª≠a ƒë∆°n h√†ng";
  bool isLocked = Model.Status == "Shipping" || Model.Status == "Completed";
  var disabled = isLocked ? "disabled" : null;
}

<div class="d-flex justify-content-center mt-5">
  <div class="card shadow" style="width:1000px;">
    <div class="card-header bg-warning text-dark">
      <h4 class="mb-0">‚úèÔ∏è Ch·ªânh s·ª≠a ƒë∆°n h√†ng</h4>
    </div>
    <div class="card-body">
      @Html.ValidationSummary(true, "", new { @class = "text-danger" })
      <form asp-action="Edit" asp-route-id="@Model.OrderID" method="post">
        @Html.AntiForgeryToken()
        <input asp-for="OrderID" type="hidden" />

        <!-- Ng∆∞·ªùi ƒë·∫∑t h√†ng -->
        <div class="mb-3">
          <label asp-for="UserID" class="form-label">Ng∆∞·ªùi ƒë·∫∑t h√†ng</label>
          <select asp-for="UserID" class="form-select" asp-items="ViewBag.Users" disabled="@disabled">
            <option value="">-- Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng --</option>
          </select>
          <span asp-validation-for="UserID" class="text-danger"></span>
        </div>

        <!-- Tr·∫°ng th√°i ƒë∆°n h√†ng -->
        <div class="mb-3">
          <label asp-for="Status" class="form-label">Tr·∫°ng th√°i ƒë∆°n h√†ng</label>
          <select asp-for="Status" class="form-select">
            <option>Pending</option>
            <option>Confirmed</option>
            <option>Shipping</option>
            <option>Completed</option>
            <option>Cancelled</option>
          </select>
          <span asp-validation-for="Status" class="text-danger"></span>
        </div>

        <!-- Danh s√°ch s·∫£n ph·∫©m -->
        <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
          <h5>üõí S·∫£n ph·∫©m</h5>
          @if (!isLocked)
          {
            <button type="button" class="btn btn-outline-secondary" onclick="addProductRow()">
              ‚ûï Th√™m s·∫£n ph·∫©m
            </button>
          }
        </div>

        <div id="product-list">
          @for (int i = 0; i < Model.Items.Count; i++)
          {
            <div class="row mb-2 product-row">
              <div class="col-md-6">
                <label asp-for="Items[@i].VariantID" class="form-label">S·∫£n ph·∫©m</label>
                <select asp-for="Items[@i].VariantID" class="form-select variant-select" asp-items="ViewBag.Variants"
                  disabled="@disabled">
                  <option value="">-- Ch·ªçn s·∫£n ph·∫©m --</option>
                </select>
                <span asp-validation-for="Items[@i].VariantID" class="text-danger"></span>
              </div>
              <div class="col-md-4">
                <label asp-for="Items[@i].Quantity" class="form-label">S·ªë l∆∞·ª£ng</label>
                <input asp-for="Items[@i].Quantity" type="number" min="1" class="form-control" disabled="@disabled" />
                <span asp-validation-for="Items[@i].Quantity" class="text-danger"></span>
              </div>
              <div class="col-md-2 d-flex align-items-end">
                @if (!isLocked)
                {
                  <button type="button" class="btn btn-danger mb-1" onclick="removeRow(this)">
                    ‚ûñ
                  </button>
                }
              </div>
            </div>
          }
        </div>

        <div class="mt-4">
          <button type="submit" class="btn btn-primary">C·∫≠p nh·∫≠t</button>
          <a asp-action="Index" class="btn btn-secondary ms-2">Quay l·∫°i</a>
        </div>
      </form>
    </div>
  </div>
</div>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />
  <script>
    let productIndex = @Model.Items.Count;
    const variantOptions = document.querySelector(".variant-select").innerHTML;

    function addProductRow() {
      const container = document.getElementById("product-list");
      const idx = productIndex++;

      const row = document.createElement("div");
      row.className = "row mb-2 product-row";
      row.innerHTML = `
              <div class="col-md-6">
                <label for="Items_${idx}__VariantID" class="form-label">S·∫£n ph·∫©m</label>
                <select
                  name="Items[${idx}].VariantID"
                  id="Items_${idx}__VariantID"
                  class="form-select">
                  <option value="" selected>-- Ch·ªçn s·∫£n ph·∫©m --</option>
                  ${[...document.querySelectorAll(".variant-select option")]
          .filter(option => option.value)
          .map(option => `<option value="${option.value}">${option.textContent}</option>`)
          .join('')}
                </select>
                <span
                  class="text-danger"
                  data-valmsg-for="Items[${idx}].VariantID"
                  data-valmsg-replace="true">
                </span>
              </div>
              <div class="col-md-4">
                <label for="Items_${idx}__Quantity" class="form-label">S·ªë l∆∞·ª£ng</label>
                <input
                  name="Items[${idx}].Quantity"
                  id="Items_${idx}__Quantity"
                  type="number" min="1"
                  class="form-control" />
                <span
                  class="text-danger"
                  data-valmsg-for="Items[${idx}].Quantity"
                  data-valmsg-replace="true">
                </span>
              </div>
              <div class="col-md-2 d-flex align-items-end">
                <button
                  type="button"
                  class="btn btn-danger mb-1"
                  onclick="removeRow(this)">
                  ‚ûñ
                </button>
              </div>`;

      container.appendChild(row);
      $.validator.unobtrusive.parse(container);
    }
    function removeRow(btn) {
      const rows = document.querySelectorAll(".product-row");
      if (rows.length > 1) {
        btn.closest(".product-row").remove();
      } else {
        alert("Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m trong ƒë∆°n.");
      }
    }
  </script>
}