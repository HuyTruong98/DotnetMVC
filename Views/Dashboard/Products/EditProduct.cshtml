@model OnlineStoreMVC.Models.ViewModels.ProductViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using OnlineStoreMVC.Models

@{
  Layout = "~/Views/Shared/_DashboardLayout.cshtml";
  ViewData["Title"] = "Ch·ªânh s·ª≠a s·∫£n ph·∫©m";
}

<div class="d-flex justify-content-center mt-5">
  <div class="card shadow" style="width:800px;">
    <div class="card-header bg-warning text-dark">
      <h4 class="mb-0">‚úèÔ∏è Ch·ªânh s·ª≠a s·∫£n ph·∫©m</h4>
    </div>
    <div class="card-body">
      @Html.ValidationSummary(true, "", new { @class = "text-danger" })

      <form asp-action="Edit" asp-controller="DashboardProduct" asp-route-id="@Model.ProductID" method="post"
        enctype="multipart/form-data">
        @Html.AntiForgeryToken()

        <input asp-for="ProductID" type="hidden" />

        <div class="mb-3">
          <label asp-for="ProductName" class="form-label">T√™n</label>
          <input asp-for="ProductName" class="form-control" />
          <span asp-validation-for="ProductName" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label asp-for="Price" class="form-label">Gi√°</label>
          <input asp-for="Price" class="form-control" oninput="this.value=this.value.replace(/[^0-9]/g,'')"
            value="@(Model.Price.HasValue? Model.Price.Value.ToString("0") : "")" />
          <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label asp-for="CategoryID" class="form-label">Lo·∫°i</label>
          <select asp-for="CategoryID" class="form-select" asp-items="ViewBag.Categories">
            <option value="">-- Ch·ªçn danh m·ª•c --</option>
          </select>
          <span asp-validation-for="CategoryID" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label asp-for="Status" class="form-label">Tr·∫°ng th√°i</label>
          <select asp-for="Status" class="form-select">
            <option value="Available">C√≥ s·∫µn</option>
            <option value="OutOfStock">H·∫øt h√†ng</option>
            <option value="Promotion">Khuy·∫øn m√£i</option>
          </select>
          <span asp-validation-for="Status" class="text-danger"></span>
        </div>

        <div class="mb-3 form-check">
          <input asp-for="IsFeatured" class="form-check-input" />
          <label asp-for="IsFeatured" class="form-check-label">S·∫£n ph·∫©m n·ªïi b·∫≠t</label>
        </div>

        <div class="mb-3">
          <label class="form-label">·∫¢nh hi·ªán t·∫°i</label>
          <div class="d-flex flex-wrap gap-2">
            @{
              var images = ViewBag.ExistingImages as IEnumerable<ProductImage>;
            }
            @if (images?.Any() == true)
            {
              foreach (var img in images)
              {
                <img src="@img.ImageURL" width="100" class="img-thumbnail" />
              }
            }
            else
            {
              <span class="text-muted">Ch∆∞a c√≥ ·∫£nh</span>
            }
          </div>
        </div>

        <div class="mb-3">
          <label class="form-label">Thay ·∫£nh m·ªõi (n·∫øu mu·ªën)</label>
          <input type="file" name="Images" multiple class="form-control" />
        </div>

        <div class="mb-3">
          <label asp-for="Description" class="form-label">Ghi ch√∫</label>
          <textarea asp-for="Description" class="form-control" rows="3"></textarea>
        </div>

        <hr />
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5 class="text-primary mb-0">üß¨ Size, m√†u, t·ªìn kho s·∫£n ph·∫©m</h5>
          <button type="button" class="btn btn-outline-primary" onclick="addVariant()">‚ûï Th√™m</button>
        </div>
        <div id="variant-container">
          @for (int i = 0; i < Model.Variants.Count; i++)
          {
            var vm = Model.Variants[i];
            var isProtected = vm.VariantID.HasValue
            && Model.ProtectedVariantIds.Contains(vm.VariantID.Value);

            <div class="row g-2 align-items-end mb-3 variant-item">
              <div class="col">
                <label asp-for="Variants[@i].Size" class="form-label">Size</label>
                <input asp-for="Variants[@i].Size" class="form-control" />
                <span asp-validation-for="Variants[@i].Size" class="text-danger"></span>
              </div>
              <div class="col">
                <label asp-for="Variants[@i].Color" class="form-label">M√†u s·∫Øc</label>
                <input asp-for="Variants[@i].Color" class="form-control" />
                <span asp-validation-for="Variants[@i].Color" class="text-danger"></span>
              </div>
              <div class="col">
                <label asp-for="Variants[@i].Stock" class="form-label">T·ªìn kho</label>
                <input asp-for="Variants[@i].Stock" class="form-control" />
                <span asp-validation-for="Variants[@i].Stock" class="text-danger"></span>
              </div>
              <div class="col-auto">
                @if (isProtected)
                {
                  <button type="button" class="btn btn-sm btn-secondary" disabled title="ƒê√£ c√≥ ƒë∆°n h√†ng, kh√¥ng th·ªÉ x√≥a">
                    üîí
                  </button>
                }
                else
                {
                  <button type="button" class="btn btn-sm btn-danger" onclick="removeVariant(this)">
                    ‚ûñ
                  </button>
                }
              </div>
            </div>
          }
        </div>

        <div class="mt-4">
          <button type="submit" class="btn btn-warning">C·∫≠p nh·∫≠t</button>
          <a asp-action="Index" class="btn btn-secondary ms-2">Quay l·∫°i</a>
        </div>
      </form>
    </div>
  </div>
</div>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />
  <script>
    // B·∫Øt ƒë·∫ßu index t·ª´ s·ªë variants hi·ªán c√≥
    let variantIndex = @Model.Variants.Count;

    // Th√™m 1 row bi·∫øn th·ªÉ m·ªõi
    function addVariant() {
      const container = document.getElementById("variant-container");
      const idx = variantIndex++;
      const html = `
                      <div class="row g-2 align-items-end mb-3 variant-item">
                        <div class="col">
                          <label for="Variants_${idx}__Size" class="form-label">Size</label>
                          <input name="Variants[${idx}].Size" 
                                 id="Variants_${idx}__Size"
                                 class="form-control" />
                          <span class="text-danger" 
                                data-valmsg-for="Variants[${idx}].Size"
                                data-valmsg-replace="true"></span>
                        </div>
                        <div class="col">
                          <label for="Variants_${idx}__Color" class="form-label">M√†u s·∫Øc</label>
                          <input name="Variants[${idx}].Color"
                                 id="Variants_${idx}__Color"
                                 class="form-control" />
                          <span class="text-danger" 
                                data-valmsg-for="Variants[${idx}].Color"
                                data-valmsg-replace="true"></span>
                        </div>
                        <div class="col">
                          <label for="Variants_${idx}__Stock" class="form-label">T·ªìn kho</label>
                          <input name="Variants[${idx}].Stock" 
                                 id="Variants_${idx}__Stock"
                                 class="form-control" />
                          <span class="text-danger" 
                                data-valmsg-for="Variants[${idx}].Stock"
                                data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-auto">
                          <button type="button" class="btn btn-sm btn-danger"
                                  onclick="removeVariant(this)">‚ûñ</button>
                        </div>
                      </div>`;
      container.insertAdjacentHTML("beforeend", html);
      $.validator.unobtrusive.parse(container);
    }

    function removeVariant(btn) {
      btn.closest(".variant-item").remove();
    }
  </script>
}