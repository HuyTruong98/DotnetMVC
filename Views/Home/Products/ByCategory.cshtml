@using OnlineStoreMVC.Helpers
@model List<OnlineStoreMVC.Models.Product>
@{
  Layout = "~/Views/Shared/_Layout.cshtml";
  ViewData["Title"] = "Sản phẩm theo danh mục";
}

<div class="container" style="margin-top: 80px">
  <h2 class="mb-4">
    Sản phẩm thuộc danh mục:
    @(Model.Any() ? Model.First().Category?.CategoryName : "Không có")
  </h2>

  <div class="row mb-3">
    <div class="col-md-6">
      <input type="text" id="searchBox" class="form-control" placeholder="🔍 Tìm kiếm sản phẩm..." />
    </div>
    <div class="col-md-6 text-end">
      <select id="sortSelect" class="form-select w-auto d-inline-block">
        <option value="default">-- Sắp xếp --</option>
        <option value="asc">Giá ↑ (thấp → cao)</option>
        <option value="desc">Giá ↓ (cao → thấp)</option>
      </select>
    </div>
  </div>

  <div class="row g-4" id="product-list">
    @for (int i = 0; i < Model.Count; i++)
    {
      var product = Model[i];
      var imgUrl = product.ProductImages?
      .FirstOrDefault()?.ImageURL
      ?? "/images/no-image.png";

      var promotions = ViewBag.Promotions as List<OnlineStoreMVC.Models.Promotion> ?? new();
      var promo = promotions.FirstOrDefault(p => p.ProductID == product.ProductID);
      var discountedPrice = promo != null
      ? product.Price * (1 - (decimal)promo.DiscountPercent / 100)
      : 0m;

      <div class="col-lg-3 col-md-6" data-name="@product.ProductName.ToLower()" data-price="@product.Price">


        <div class="product-card">
          <div class="product-image">
            <a asp-controller="HomeProduct" asp-action="Detail" asp-route-id="@product.ProductID">
              <img src="@Url.Content(imgUrl)" class="img-fluid w-100" alt="@product.ProductName" class="img-hot"
                style="object-fit: contain;" />
            </a>

            <div class="product-badges">
              @if (promo != null)
              {
                <span class="badge bg-warning">Sale</span>
              }
            </div>
            <div class="product-actions">
              @if (product.IsFeatured)
              {
                <button class="btn btn-sm btn-outline-light" title="Yêu thích">
                  <img style="height: 20px" src="~/images/heart.png" alt="heart" />
                </button>
              }
              <a asp-controller="HomeProduct" asp-action="Detail" asp-route-id="@product.ProductID"
                class="btn btn-sm btn-outline-light" title="Xem nhanh">
                <img style="height: 10px" src="~/images/view.png" />
              </a>
            </div>
          </div>

          <div class="product-info">
            <h6 class="product-title"> <a asp-controller="HomeProduct" asp-action="Detail"
                asp-route-id="@product.ProductID" class="text-decoration-none text-dark">
                @product.ProductName
              </a></h6>


            <div class="product-price">
              @if (promo != null)
              {
                <span class="current-price">
                  <del class="price-sale">
                    @FormatHelper.FormatCurrency(product.Price)
                  </del>
                </span>
                <span class="current-price">
                  @FormatHelper.FormatCurrency(discountedPrice)
                </span>
              }
              else
              {
                <span class="current-price">
                  @FormatHelper.FormatCurrency(product.Price)
                </span>
              }
              @* <span class="old-price">400.000₫</span> *@
            </div>
            <div class="mt-2">
              <a asp-controller="HomeProduct" asp-action="Detail" asp-route-id="@product.ProductID"
                class="btn btn-sm btn-primary w-100 add-to-cart-btn text-decoration-none d-flex align-items-center justify-content-center gap-2"
                data-product-id="@product.ProductID">

                <i class="fas fa-eye"></i>
                <span>Xem Chi Tiết</span>
              </a>
            </div>

          </div>
        </div>
      </div>
    }
  </div>

  @if (Model.Count > 8)
  {
    <div class="text-center mt-4">
      <button id="loadMoreBtn" class="btn btn-primary btn-lg">
        Xem thêm
      </button>
    </div>
  }
</div>

@section Scripts {
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      let currentVisible = 8; // 
      const container = document.getElementById("product-list");
      const loadMoreBtn = document.getElementById("loadMoreBtn");
      const searchBox = document.getElementById("searchBox");
      const sortSelect = document.getElementById("sortSelect");

      function getAllCards() {
        return Array.from(container.querySelectorAll(".product-card"));
      }

      function applyPagination(cards) {
        cards.forEach((c, idx) => {
          c.style.display = idx < currentVisible ? "" : "none";
        });
        if (loadMoreBtn) {
          loadMoreBtn.style.display = currentVisible >= cards.length
            ? "none"
            : "";
        }
      }

      function sortCards(cards, mode) {
        return cards.sort((a, b) => {
          const pa = parseFloat(a.dataset.price);
          const pb = parseFloat(b.dataset.price);
          if (mode === "asc") return pa - pb;
          if (mode === "desc") return pb - pa;
          return 0;
        });
      }

      // Load More
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener("click", () => {
          currentVisible += 4;
          applyPagination(getAllCards());
        });
      }

      // Search
      if (searchBox) {
        searchBox.addEventListener("input", () => {
          const kw = searchBox.value.trim().toLowerCase();
          const all = getAllCards();
          if (kw) {
            all.forEach(c =>
              c.style.display = c.dataset.name.includes(kw) ? "" : "none"
            );
            if (loadMoreBtn) loadMoreBtn.style.display = "none";
          } else {
            const sorted = sortCards(all, sortSelect.value);
            sorted.forEach(c => container.appendChild(c));
            currentVisible = 8;
            applyPagination(sorted);
          }
        });
      }

      // Sort
      if (sortSelect) {
        sortSelect.addEventListener("change", () => {
          const mode = sortSelect.value;
          const kw = searchBox.value.trim().toLowerCase();
          const all = getAllCards();

          if (kw) {
            const matched = all.filter(c => c.dataset.name.includes(kw));
            sortCards(matched, mode).forEach(c => {
              c.style.display = "";
              container.appendChild(c);
            });
            all.filter(c => !c.dataset.name.includes(kw))
              .forEach(c => c.style.display = "none");
            if (loadMoreBtn) loadMoreBtn.style.display = "none";
          } else {
            const sorted = sortCards(all, mode);
            sorted.forEach(c => container.appendChild(c));
            currentVisible = 8;
            applyPagination(sorted);
          }
        });
      }

      // Init
      applyPagination(getAllCards());

      // Ajax Add To Cart
      $(document).on("click", ".add-to-cart-btn", function () {
        const productId = $(this).data("product-id");
        $.ajax({
          url: "/HomeCart/AddToCart",
          type: "POST",
          data: { productId },
          success: function (res) {
            if (res.success) {
              $("#cart-badge").text(res.cartCount);
            }
          }
        });
      });
    });
  </script>
}