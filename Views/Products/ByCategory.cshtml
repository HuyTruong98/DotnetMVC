@model List<OnlineStoreMVC.Models.Product>
    @{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "S·∫£n ph·∫©m theo danh m·ª•c";
    }

               <div class="container mt-4">
                   <h2 class="mb-4">
                       S·∫£n ph·∫©m thu·ªôc danh m·ª•c: @(Model.Any() ? Model.First().Category?.CategoryName : "Kh√¥ng c√≥")
                   </h2>

                   <!-- Search + Sort -->
                   <div class="row mb-3">
                       <div class="col-md-6">
                           <input type="text" id="searchBox" class="form-control" placeholder="üîç T√¨m ki·∫øm s·∫£n ph·∫©m...">
                       </div>
                       <div class="col-md-6 text-end">
                           <select id="sortSelect" class="form-select w-auto d-inline-block">
                               <option value="default">-- S·∫Øp x·∫øp --</option>
                               <option value="asc">Gi√° ‚Üë (th·∫•p ‚Üí cao)</option>
                               <option value="desc">Gi√° ‚Üì (cao ‚Üí th·∫•p)</option>
                           </select>
                       </div>
                   </div>
                   <div class="row" id="product-list">
                       @if (Model.Any())
        {
            var index = 0;
            foreach (var product in Model)
            {
                var image = product.ProductImages?.FirstOrDefault()?.ImageURL ?? "/images/no-image.png";
                       <div class="col-lg-4 col-md-6 mb-4 product-card @(index >= 4 ? "d-none" : "")"  data-name="@product.ProductName.ToLower()" data-price="@product.Price">
                           <div  class="card h-100 d-flex flex-column">
                               <img src="@image" class="card-img-top" alt="@product.ProductName" />

                               <div class="card-body d-flex flex-column">
                                   <h5 class="card-title">@product.ProductName</h5>
                                   <p class="card-text text-muted">@product.Description</p>
                                   <p class="fw-bold text-danger" style="font-size: 18px">@product.Price.ToString("N0") ‚Ç´</p>

                                   <a asp-controller="Cart"
                                      asp-action="Add"
                                      asp-route-id="@product.ProductID"
                                      class="btn btn-primary mt-auto w-100">
                                       üõí Th√™m v√†o gi·ªè
                                   </a>
                               </div>
                           </div>
                       </div>
                index++;
            }
        }
        else
        {
                       <p class="text-muted">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c n√†y.</p>
        }
                   </div>

                   @if (Model.Count > 4)
    {
                   <div class="text-center mt-3">
                       <button id="loadMoreBtn" style="width: 100%" class="btn btn-outline-primary">Xem th√™m</button>
                   </div>
    }
               </div>

    @section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                let currentVisible = 4;
                const products = document.querySelectorAll(".product-card");
                const loadMoreBtn = document.getElementById("loadMoreBtn");

                if (loadMoreBtn) {
                    loadMoreBtn.addEventListener("click", function () {
                        let nextVisible = currentVisible + 4;
                        for (let i = currentVisible; i < nextVisible && i < products.length; i++) {
                            products[i].classList.remove("d-none");
                        }
                        currentVisible = nextVisible;

                        if (currentVisible >= products.length) {
                            loadMoreBtn.style.display = "none"; // ·∫©n n√∫t khi h·∫øt sp
                        }
                    });
                }
            });

            document.addEventListener("DOMContentLoaded", function () {
                let currentVisible = 4;
                const products = document.querySelectorAll(".product-card");
                const loadMoreBtn = document.getElementById("loadMoreBtn");

                // Load More
                if (loadMoreBtn) {
                    loadMoreBtn.addEventListener("click", function () {
                        let nextVisible = currentVisible + 4;
                        for (let i = currentVisible; i < nextVisible && i < products.length; i++) {
                            products[i].classList.remove("d-none");
                        }
                        currentVisible = nextVisible;

                        if (currentVisible >= products.length) {
                            loadMoreBtn.style.display = "none";
                        }
                    });
                }
                searchBox.addEventListener("input", function () {
                    const kw = this.value.trim().toLowerCase();
                    const all = getAllCards();
                    if (kw.length > 0) {
                        all.forEach(c => {
                            if (c.dataset.name.includes(kw)) {
                                c.classList.remove("d-none");
                                container.appendChild(c);
                            } else {
                                c.classList.add("d-none");
                            }
                        });
                        if (loadMoreBtn) loadMoreBtn.style.display = "none";
                    } else {
                        const sorted = sortCardsArray(all, sortSelect.value);
                        sorted.forEach(c => container.appendChild(c));
                        applyPagination(sorted);
                    }
                });

                // ‚Üï Sort
                sortSelect.addEventListener("change", function () {
                    const mode = this.value;
                    const kw = searchBox.value.trim().toLowerCase();
                    const all = getAllCards();

                    if (kw.length > 0) {
                        const matched = all.filter(c => c.dataset.name.includes(kw));
                        const sortedMatched = sortCardsArray(matched, mode);
                        sortedMatched.forEach(c => {
                            container.appendChild(c);
                            c.classList.remove("d-none");
                        });
                        all.filter(c => !c.dataset.name.includes(kw))
                            .forEach(c => c.classList.add("d-none"));
                        if (loadMoreBtn) loadMoreBtn.style.display = "none";
                    } else {
                        const sorted = sortCardsArray(all, mode);
                        sorted.forEach(c => container.appendChild(c));
                        applyPagination(sorted);
                    }
                });

                // Kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu: ƒë·∫£m b·∫£o pagination theo DOM hi·ªán t·∫°i
                applyPagination(getAllCards());
            });
        </script>
    }
